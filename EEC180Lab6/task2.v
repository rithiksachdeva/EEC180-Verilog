
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module task2(
input clk, start, reset,
output reg done,
output reg [10:0] clock_count = 11'd0

);

//# row A:         0, col A:          1, row B:          1, col B:         0, k:  0
//# Matrix A: -14, Matrix B:-100 , Matrix C:   5472, output:      x, clock_count:   1 

//# row A:         1, col A:          1, row B:          1, col B:         0, k:  1
//# Matrix A:-100, Matrix B:-100 , Matrix C:  21509, output:      x, clock_count:   9
 
reg signed [7:0] matrixA [63:0];
reg signed [7:0] matrixB [63:0];
reg signed [18:0] matrixC [63:0];

wire signed [18:0] mem;
wire signed [18:0] mem2;

 
reg [6:0] i = 7'd0;
reg [6:0] j = 7'd0;
reg [6:0] k = 7'd0;

reg [6:0] prev_i = 7'd0;
reg [6:0] prev_j= 7'd0;

 
reg write_enable;
reg macclear = 1'b0;


  // clock_count to finish matricies  = (8x8) * 8 clock cycles 

//eqt: cij = sum (aik(bkj))
//column major order 
initial begin
  $readmemb("C:\\Users\\rithi\\Desktop\\EEC180\\EEC180Lab6\\ram_a_init.txt",matrixA);
  $readmemb("C:\\Users\\rithi\\Desktop\\EEC180\\EEC180Lab6\\ram_b_init.txt",matrixB);
 
end


mac math(.x(matrixA[i]), .y(matrixB[j]), .s(mem), .clk(clk), .macc_clear(macclear)); //find a way to output into a section of matrixC
ram RAMOUTPUT(.data_in(mem), .data_out(mem2), .write_enable(write_enable), .clk(clk),.address(k)); 

 
always @ (posedge clk) begin // clock
		if (reset == 1'b1) begin 
			clock_count = 11'd0; end 
		else if (start == 1'b1) begin 
			clock_count = (clock_count > 11'd512) ? (11'd0) : (clock_count + 11'd1); end 
		end 	

always @(clock_count) begin  
	
	if (reset == 1'b1 || clock_count == 11'd0) begin // reset 
		prev_i = 7'd0;
		prev_j = 7'd0;
		i = 7'd0;  
		j = 7'd0;
		k = 7'd0;
		//$display ("reset");
	end 

	if (start == 1'b1) begin //start 
	
		if(((clock_count % 11'd64)== 11'd0) && (clock_count != 11'd0) ) begin 
			prev_j = (j == 7'd63) ? (7'd0): (prev_j + 7'd1);
			//$display("prev_j: %d", prev_j);
			j = (prev_j*7'd8); end 
		else if ((j<7'd64) && (clock_count != 11'd0)) begin 
			j = (j == ((prev_j*7'd8) + 7'd7)) ? (prev_j*7'd8) : (j+7'd1); end 
			
		
		if (((clock_count % 11'd8) == 11'd0) && (clock_count != 11'd0)) begin // i count 
			prev_i = (i == 7'd63) ? (7'd0): (prev_i+7'd1);
			i = prev_i; 
			k = k+7'd1; end
		else if ((i < 7'd63) && (clock_count != 11'd0)) begin
			i = (i == (prev_i+56)) ? (11'd0) : (i+ 7'd8); end 
	end 
end 

always @(macclear) begin // throw into MatrixC
	write_enable = 1'b0;
	if((((clock_count-11'd1) % 11'd8) == 11'd0) && (clock_count > 11'd8)) begin
		write_enable = 1'b1;
		
		if (write_enable == 1'b1) begin 
			//$display("write_enable ON, data_in: %d, data_out: %d", mem, mem2); 
		end
			
		matrixC[k] = mem2; 
		//$display("data_in: %d, data_out: %d, matrixC: %d", mem, mem2, matrixC[k]); 
		end
	end

	
		
 


always @(clock_count) begin // macc_clear, done, write_enable  
	done = (clock_count == 11'd520) ? (1'b1) : (1'b0);
	
//	if (((clock_count % 11'd8) == 11'd1) && (start == 1'b1) && (clock_count >= 11'd8))begin
//		write_enable = 1'b1;
//		$display ("writing:%d" , mem2);end
//	else begin
//		write_enable = 1'b0; end
	
	if ((reset == 1'b1) || (start == 1'b0) || (clock_count<1)) begin 
		macclear = 1'b1; end 
	else if (((clock_count % 11'd8) == 11'd0) && (start == 1'b1)) begin 
		macclear = 1'b1;  
		//$display("__________________________________________________________________________________________________"); end
		//$display("%d * %d = %d", matrixA[i], matrixB[j], mem);
	end
	else begin
		macclear = 1'b0; end 
end



always @(posedge clk) begin //displays
		//$display ("row A:%d, col A: %d, row B: %d, col B:%d, k:%d", (i%8), (i/8), (j%8), (j/8), k);
		//$display ("Matrix C:%d, output:%d", mem, mem2);
		//$display("i:%d, prev_i:%d, j:%d, prev_j:%d clock_count:%d", i , prev_i, j, prev_j, clock_count);
		//$display("Matrix A:%d, Matrix B:%d , Matrix C:%d, output:%d, clock_count:%d", matrixA[i], matrixB[j], mem, mem2, clock_count); 
end

  
	
endmodule


