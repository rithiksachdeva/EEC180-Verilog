
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module task3(
input clk, start, reset,
output reg done,
output reg [10:0] clock_count = 11'd0
);

reg signed [7:0] matrixA [63:0]; // matrix A has 2 values going into both MACs 
reg signed [7:0] matrixB [63:0]; //matrix B has one value going into both MACs
reg signed [18:0] matrixC [63:0];

wire signed [18:0] out, answer, mac, mac2, dff_out;

integer a1 = 0; //indexing variables 
integer a2 = 0;
integer b = 0;
integer c = 0;

integer prev_a1 = 0; //pre-indexing variables
integer prev_a2 = 0;
integer prev_b = 0;
integer prev_c = 0; 

reg write_enable = 1'd0; //enables 
reg macclear = 1'd0;
reg macclear2 = 1'd0; 
reg mux_select = 1'd0;

 

initial begin
  $readmemb("C:\\Users\\rithi\\Desktop\\EEC180\\EEC180Lab6\\ram_a_init.txt",matrixA);
  $readmemb("C:\\Users\\rithi\\Desktop\\EEC180\\EEC180Lab6\\ram_b_init.txt",matrixB);
 
end

mac math1(.x(matrixA[a1]), .y(matrixB[b]), .s(mac), .clk(clk), .macc_clear(macclear)); //find a way to output into a section of matrixC
mac math2(.x(matrixA[a2]), .y(matrixB[b]), .s(mac2), .clk(clk), .macc_clear(macclear2));
dflipflop dff(.in(mac2), .out(dff_out), .clk(clk));
mux21 mux(.in1(mac), .in2(dff_out), .s(mux_select), .out(out), .clk(clk));
ram RAMOUTPUT(.data_in(out), .data_out(answer), .write_enable(write_enable), .clk(clk),.address(c)); 

always @ (posedge clk) begin // clock
	if (reset == 1'b1) begin 
		clock_count = 11'd0; end 
	else if (start == 1'b1) begin 
		clock_count = (clock_count > 11'd512) ? (11'd0) : (clock_count + 11'd1); end 
	end

always @ (clock_count) begin //MAC
	if(reset == 1'b1) begin //reset
		a1 = 0; 
		a2 = 1; 
		b = 0;
		c = 0;
		prev_a1 = 0;
		prev_a2 = 1;
		prev_b = 0; 
		//$display("reset"); 
	end 
	
	if (start == 1'b1) begin //start 
		if(((clock_count % 11'd64)== 11'd0) && (clock_count != 11'd0) ) begin //matrixB[b] 
			prev_b = (b == 63) ? (7'd0): (prev_b + 1);
			b = (prev_b*8); end 
		else if ((b < 64) && (clock_count != 11'd0)) begin 
			b = (b == ((prev_b*7'd8) + 7'd7)) ? (prev_b*7'd8) : (b+7'd1); 
			//$display("b value: %d", b);
		end 
			
		if (((clock_count % 11'd8) == 11'd0) && (clock_count != 11'd0) && (prev_a1 < 7)) begin //matrixA[a1]
			prev_a1 = (a1 == 63) ? (0) : (prev_a1 + 14); 
			a1 = prev_a1; 
			//$display("prev_a1 increased to %d", prev_a1);
		end 
		else if( (a1 < 63) && (clock_count != 11'd0)) begin
			a1 = (a1 == (prev_a1 + 56)) ? (prev_a1) : (a1 + 1); end 
		
		if ((((clock_count-1) % 11'd8) == 11'd0) && (clock_count != 11'd0) && (prev_a2 < 7)) begin //matrixA[a2]
			prev_a2 = (a2 == 63) ? (1) : (prev_a2 + 14);
			a2 = prev_a2;  
			c = c + 1; 
			//$display("prev_a2 increased to %d", prev_a2);
		end 
		else if((a2 < 63) && (clock_count != 11'd0)) begin 
			a2 = (a2 == (prev_a2 + 56)) ? (prev_a2) : (a2 + 1); end 
	end 
end
	
always @ (posedge clk) begin 
	done = (c > 63) ? 1:0;
	
	////mac_clear///
	if ((reset == 1'b1) || (start == 1'b0) || (clock_count<1)) begin 
		macclear = 1'b1; end 
	else if (((clock_count % 11'd8) == 11'd0) && (start == 1'b1)) begin 
		macclear = 1'b1; end
	else begin 
		macclear = 1'b0; end
	
	if ((reset == 1'b1) || (start == 1'b0) || (clock_count<1)) begin 
		macclear = 1'b1; end 
	else if ((((clock_count-1) % 11'd8) == 11'd0) && (start == 1'b1)) begin 
		macclear2 = 1'b1; end
	else begin 
		macclear2 = 1'b0; end 
end 
		
		
always @(c) begin 

	////mux_selection///
	if ((c % 2) == 1)  begin 
		mux_select = 1'b1; end
	else begin
		mux_select = 1'b0; end 
		
end 
	

always @(mux_select) begin  
	
	////write_enable////
	write_enable = 1'd0;
	if((((clock_count-11'd1) % 11'd8) == 11'd0) && (clock_count > 11'd8) && (mux_select == 1'b0)) begin
		write_enable = 1'b1; end 
	else if ((((clock_count-11'd2) % 11'd8) == 11'd0) && (clock_count > 11'd8) && (mux_select == 1'b1)) begin
		write_enable = 1'b1; end 
	else begin
		write_enable = 1'b0; end 
end 

always @(posedge clk) begin 
	//$display ("row A1:%d, col A1: %d, row B: %d, col B:%d, c:%d, clock_count: %d", (a1%8), (a1/8), (b%8), (b/8), c, clock_count);
	//$display( "Matrix A1: %d, Matrix B: %d, output: %d", matrixA[a1], matrixB[b], mac);
	//$display ("row A2:%d, col A2: %d, row B: %d, col B:%d, c:%d", (a2%8), (a2/8), (b%8), (b/8), c);
	//$display( "Matrix A2: %d, Matrix B: %d, output: %d", matrixA[a2], matrixB[b], mac2);
	if (write_enable == 1'b1) begin 
		//$display("---------------------------writing---------------------------");
		//$display("data_in: %d, data_out:%d", out, matrixC[c]); 
	end 
end 	
 
	
endmodule
